#!/usr/bin/env bash

# Color codes
# ------------------------------------------------------------------------------
if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
    export TERM=gnome-256color
elif infocmp xterm-256color >/dev/null 2>&1; then
    export TERM=xterm-256color
fi

if tput setaf 1 &> /dev/null; then
    tput sgr0
    if [[ $(tput colors) -ge 256 ]] 2>/dev/null; then
        GREEN=$(tput setaf 46)
        YELLOW=$(tput setaf 190)
        ORANGE=$(tput setaf 172)
        PURPLE=$(tput setaf 141)
        MAGENTA=$(tput setaf 203)
        WHITE=$(tput setaf 0)
        BLUE=$(tput setaf 39)
        RED=$(tput setaf 160)
    else
        GREEN=$(tput setaf 2)
        YELLOW=$(tput setaf 3)
        ORANGE=$(tput setaf 4)
        PURPLE=$(tput setaf 5)
        MAGENTA=$(tput setaf 5)
        WHITE=$(tput setaf 7)
        BLUE=$(tput setaf 6)
        RED=$(tput setaf 1)
    fi
    BOLD=$(tput bold)
    RESET=$(tput sgr0)
else
    GREEN="\033[1;32m"
    YELLOW="\033[1;33m"
    ORANGE="\033[1;33m"
    RED="\033[1;31m"
    MAGENTA="\033[1;35m"
    PURPLE="\033[1;35m"
    WHITE="\033[1;37m"
    BLUE="\033[1;36m"
    BOLD=""
    RESET="\033[m"
    RED="\033[1;31m"
fi

export GREEN
export YELLOW
export PURPLE
export MAGENTA
export ORANGE
export WHITE
export BLUE
export BOLD
export RESET
export RED

# Get the current python environment from conda or virtualenv
# ------------------------------------------------------------------------------
function _py_env() {
  if test "$VIRTUAL_ENV" ; then
    venv="$(basename \"$VIRTUAL_ENV\")"
  elif test "$CONDA_ENV" ; then
    venv="$CONDA_ENV"
  else
    venv=""
  fi
  echo $venv
}

# Add a flag for ssh connections
# ----------------------------------------------------------------------------
function _ssh_flag() {
  [[ $SSH_CONNECTION ]] && echo "☁" || echo ""
}

# Git prompt functions
# Taken from https://github.com/twolfson/sexy-bash-prompt
# ------------------------------------------------------------------------------
function get_git_branch() {
  # On branches, this will return the branch name
  # On non-branches, (no branch)
  ref="$(git symbolic-ref HEAD 2> /dev/null | sed -e 's/refs\/heads\///')"
  if [[ "$ref" != "" ]]; then
    echo "$ref"
  else
    echo "<no branch>"
  fi
}

function get_git_progress() {
  # Detect in-progress actions (e.g. merge, rebase)
  # https://github.com/git/git/blob/v1.9-rc2/wt-status.c#L1199-L1241
  git_dir="$(git rev-parse --git-dir)"

  # git merge
  if [[ -f "$git_dir/MERGE_HEAD" ]]; then
    echo "merge"
  elif [[ -d "$git_dir/rebase-apply" ]]; then
    if [[ -f "$git_dir/rebase-apply/applying" ]]; then
      # git am
      echo "am"
    else
      # git rebase
      echo "rebase"
    fi
  elif [[ -d "$git_dir/rebase-merge" ]]; then
    # git rebase --interactive/--merge
    echo "rebase"
  elif [[ -f "$git_dir/CHERRY_PICK_HEAD" ]]; then
    # git cherry-pick
    echo "cherry-pick"
  fi
  if [[ -f "$git_dir/BISECT_LOG" ]]; then
    # git bisect
    echo "bisect"
  fi
  if [[ -f "$git_dir/REVERT_HEAD" ]]; then
    # git revert --no-commit
    echo "revert"
  fi
}

is_branch1_behind_branch2 () {
  # $ git log origin/master..master -1
  # commit 4a633f715caf26f6e9495198f89bba20f3402a32
  # Author: Todd Wolfson <todd@twolfson.com>
  # Date:   Sun Jul 7 22:12:17 2013 -0700
  #
  #     Unsynced commit

  # Find the first log (if any) that is in branch1 but not branch2
  first_log="$(git log $1..$2 -1 2> /dev/null)"

  # Exit with 0 if there is a first log, 1 if there is not
  [[ -n "$first_log" ]]
}

branch_exists () {
  # List remote branches           | # Find our branch and exit with 0 or 1 if found/not found
  git branch --remote 2> /dev/null | grep --quiet "$1"
}

parse_git_ahead () {
  # Grab the local and remote branch
  branch="$(get_git_branch)"
  remote_branch="origin/$branch"

  # $ git log origin/master..master
  # commit 4a633f715caf26f6e9495198f89bba20f3402a32
  # Author: Todd Wolfson <todd@twolfson.com>
  # Date:   Sun Jul 7 22:12:17 2013 -0700
  #
  #     Unsynced commit

  # If the remote branch is behind the local branch
  # or it has not been merged into origin (remote branch doesn't exist)
  if (is_branch1_behind_branch2 "$remote_branch" "$branch" ||
      ! branch_exists "$remote_branch"); then
    # echo our character
    echo 1
  fi
}

parse_git_behind () {
  # Grab the branch
  branch="$(get_git_branch)"
  remote_branch="origin/$branch"

  # $ git log master..origin/master
  # commit 4a633f715caf26f6e9495198f89bba20f3402a32
  # Author: Todd Wolfson <todd@twolfson.com>
  # Date:   Sun Jul 7 22:12:17 2013 -0700
  #
  #     Unsynced commit

  # If the local branch is behind the remote branch
  if is_branch1_behind_branch2 "$branch" "$remote_branch"; then
    # echo our character
    echo 1
  fi
}

function parse_git_dirty() {
	local s="";
  # If the git status has *any* changes (e.g. dirty), echo our character
  if [[ -n "$(git status --porcelain 2> /dev/null)" ]]; then
    # Ensure the index is up to date.
		git update-index --really-refresh -q &>/dev/null;

		# Check for uncommitted changes in the index.
		if ! $(git diff --quiet --ignore-submodules --cached); then
			s="${s} \[${BLUE}\]✭\[${RESET}\]";
		fi;

		# Check for unstaged changes.
		if ! $(git diff-files --quiet --ignore-submodules --); then
			s="${s} \[${PURPLE}\]✱\[${RESET}\]";
		fi;

		# Check for untracked files.
		if [ -n "$(git ls-files --others --exclude-standard)" ]; then
			s="${s} \[${GREEN}\]✚\[${RESET}\]";
		fi;

    if [[ $(git status | grep deleted) ]]; then
      s="${s} \[${RED}\]✖\[${RESET}\]"
    fi;

    if [[ $(git status | grep renamed) ]]; then
      s="${s} \[${YELLOW}\]➜\[${RESET}\]"
    fi;

		# Check for stashed files.
		if $(git rev-parse --verify refs/stash &>/dev/null); then
			s="${s} \[${ORANGE}\]☂\[${RESET}\]";
		fi;
  fi
  echo $s;
}

function git_color() {
  ansi=""
  local git_status="`git status -unormal 2>&1`"
  if ! [[ "$git_status" =~ Not\ a\ git\ repo ]]; then
    if [[ "$git_status" =~ nothing\ to\ commit ]]; then
      local ansi=$GREEN
    elif [[ "$git_status" =~ no\ changes\ added\ to\ commit ]]; then
      local ansi=$RED
    else
      local ansi=$YELLOW
    fi
  fi
  echo "${ansi}"
}

function get_git_status() {
    # Grab the git dirty and git behind
    dirty_branch="$(parse_git_dirty)"
    branch_ahead="$(parse_git_ahead)"
    branch_behind="$(parse_git_behind)"

    # Iterate through all the cases and if it matches, then echo
    if [[ "$branch_ahead" == 1 && "$branch_behind" == 1 ]]; then
      echo "\[${PURPLE}\]⬢\[${RESET}\]"
    elif [[ "$branch_ahead" == 1 ]]; then
      echo "\[${BLUE}\]⬆\[${RESET}\]"
    elif [[ "$branch_behind" == 1 ]]; then
      echo "\[${RED}\]⬇\[${RESET}\]"
    elif [[ ! -z "$dirty_branch" ]]; then
      echo "\[${ORANGE}\]✈\[${RESET}\]"
    else
      echo "\[$GREEN\]✔\[${RESET}\]"
    fi
}

# Build the final git prompt
function _git_prompt () {

  local s=""

  if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]
  then

    local _progress="$(get_git_progress)"
    local _dirty="$(parse_git_dirty)"
    local _color="$(git_color)"

  	s="${s}${_color}$(get_git_branch)\[${RESET}\] $(get_git_status)"
    [[ $_progress ]] && s="${s} ${_color}${_progress}\[${RESET}\] "
    [[ $_dirty ]] && s="${s} ${_dirty}"
    s="${s}"
  fi

  echo $s
}

# Build a short form directory location
#   /Users/lirsacc/Downloads will become /U/l/Downloads
# ------------------------------------------------------------------------------
function _short_pwd () {
  echo $(sed "s:\([^/]\)[^/]*/:\1/:g" <<<$PWD)
}

# Build and apply the final prompt
# ------------------------------------------------------------------------------
function prompt_command() {

  previous_return_value=$?;

  local ssh_flag="$(_ssh_flag)"
  local py_env="$(_py_env)"
  local git_prompt="$(_git_prompt)"

  local prompt=""
  prompt="${prompt}\[${MAGENTA}\][$(_short_pwd)]\[${RESET}\]"

  [[ $py_env ]] && prompt="${prompt}\[${ORANGE}\] (${py_env})\[${RESET}\]"
  [[ $git_prompt ]] && prompt="${prompt}\[${WHITE}\] ${git_prompt} \[${RESET}\]"

  prompt="${prompt}\n"

  if ! test $previous_return_value -eq 0; then prompt="${prompt}\[${RED}\]"; fi
  [[ $ssh_flag ]] && prompt="${prompt} ${ssh_flag} "
  prompt="${prompt}❯ \[${RESET}\]"

  PS1="${prompt}"
  PS2="${WHITE}→ ${RESET}"
}

PROMPT_COMMAND="prompt_command"
