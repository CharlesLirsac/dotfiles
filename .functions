#!/usr/bin/env bash

# Create a new directory and enter it
function mkd() {
  mkdir -p "$@" && cd "$@" || exit 1
}

# Change working directory to the top-most Finder window location
function cdf() { # short for `cdfinder`
  cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')" || exit 1
}

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
function targz() {
  local tmpFile="${*%/}.tar"
  tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1

  size=$(
    stat -f"%z" "${tmpFile}" 2> /dev/null; # OS X `stat`
    stat -c"%s" "${tmpFile}" 2> /dev/null # GNU `stat`
  )

  local cmd=""
  if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
    # the .tar file is smaller than 50 MB and Zopfli is available; use it
    cmd="zopfli"
  else
    if hash pigz 2> /dev/null; then
      cmd="pigz"
    else
      cmd="gzip"
    fi
  fi

  echo "Compressing .tar using \`${cmd}\`â€¦"
  "${cmd}" -v "${tmpFile}" || return 1
  [ -f "${tmpFile}" ] && rm "${tmpFile}"
  echo "${tmpFile}.gz created successfully."
}

# Determine size of a file or total size of a directory
function fs() {
  if du -b /dev/null > /dev/null 2>&1; then
    local arg=-sbh
  else
    local arg=-sh
  fi
  if [[ -n "$*" ]]; then
    du $arg -- "$@"
  else
    du $arg ./.[^.]* ./*
  fi
}

# Use Gitâ€™s colored diff when available
if hash git &>/dev/null; then
  function diff() {
    git diff --no-index --color-words "$@"
  }
fi

# Create a data URL from a file
function dataurl() {
  local mimeType
  mimeType=$(file -b --mime-type "$1")
  if [[ $mimeType == text/* ]]; then
    mimeType="${mimeType};charset=utf-8"
  fi
  echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')"
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
  local port="${1:-8000}"
  sleep 1 && open "http://localhost:${port}/" &
  # Set the default Content-Type to `text/plain` instead of `application/octet-stream`
  # And serve everything as UTF-8 (although not technically correct, this doesnâ€™t break anything for binary files)
  python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}

# Compare original and gzipped file size
function gz() {
  local origsize gzipsize ratio
  origsize=$(wc -c < "$1")
  gzipsize=$(gzip -c "$1" | wc -c)
  ratio=$(echo "$gzipsize * 100/ $origsize" | bc -l)
  printf "orig: %d bytes\n" "$origsize"
  printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio"
}

# All the dig info
function digga() {
  dig +nocmd "$1" any +multiline +noall +answer
}

# Escape UTF-8 characters into their 3-byte format
function escape() {
  printf "\\\x%s" "$(printf "%s" "$@"  | xxd -p -c1 -u)"
  # print a newline unless weâ€™re piping the output to another program
  if [ -t 1 ]; then
    echo # newline
  fi
}

# Decode \x{ABCD}-style Unicode escape sequences
function unidecode() {
  perl -e "binmode(STDOUT, ':utf8'); print \"$*\""
  # print a newline unless weâ€™re piping the output to another program
  if [ -t 1 ]; then
    echo # newline
  fi
}

# Get a characterâ€™s Unicode code point
function codepoint() {
  perl -e "use utf8; print sprintf('U+%04X', ord(\"$*\"))"
  # print a newline unless weâ€™re piping the output to another program
  if [ -t 1 ]; then
    echo # newline
  fi
}

# `o` with no arguments opens current directory, otherwise opens the given
# location
function o() {
  if [ $# -eq 0 ]; then
    open .
  else
    open "$@"
  fi
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
  tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX
}

# Spoof your mac adress on en0
function spoof {
    mac=$(openssl rand -hex 6 | sed 's/\(..\)/\1:/g; s/.$//')
    echo "Changing en0 MAC to $mac"
    sudo ifconfig en0 ether "$mac"
}

# Show normally hidden system and dotfile types of files
# in Mac OSX Finder
function showhiddenfiles() {
  defaults write com.apple.Finder AppleShowAllFiles YES
  osascript -e 'tell application "Finder" to quit'
  sleep 0.25
  osascript -e 'tell application "Finder" to activate'
}

# Hide (back to defaults) normally hidden system and dotfile types of files
# in Mac OSX Finder
function hidehiddenfiles() {
  defaults write com.apple.Finder AppleShowAllFiles NO
  osascript -e 'tell application "Finder" to quit'
  sleep 0.25
  osascript -e 'tell application "Finder" to activate'
}

function fixperms(){
    find . \( -name "*.sh" -or -type d \) -exec chmod 755 {} \; && find . -type f ! -name "*.sh" -exec chmod 644 {} \;
}

# Opens the github page for the current git repository in your browser
# Adapted from:
# git@github.com:jasonneylon/dotfiles.git https://github.com/jasonneylon/dotfiles/
function gh() {
  giturl=$(git config --get remote.origin.url)

  if [[ "$giturl" == "" ]]; then
     echo "Not a git repository or no remote.origin.url set"
     return 1;
  fi

  if [[ "$giturl" == *"github"* ]]; then
    giturl=${giturl/git\@github\.com\:/https://github.com/}
  elif [[ "$giturl" == *"gitlab"* ]]; then
    giturl=${giturl/git\@gitlab\.com\:/https://gitlab.com/}
  else
    echo "Not a github repository"
    return 1;
  fi

  giturl=${giturl/\.git/\/tree/}
  branch="$(git symbolic-ref HEAD 2>/dev/null)" ||
  branch="(unnamed branch)"     # detached HEAD
  branch=${branch##refs/heads/}
  giturl=$giturl$branch
  open "$giturl"
}

function create () {
  if [ -f "$1" ]; then
    # echo "$1 already exists -> touching"
    touch "$1"
  else
    install -Dv /dev/null "$1"
  fi
}

function nvm-upgrade() {
  { (
    cd "$NVM_DIR" || exit 1
    git fetch origin
    # shellcheck disable=2046
    git checkout $(git describe --abbrev=0 --tags --match "v[0-9]*" origin)
  ) }
}

function remove-known-host() {
  sed -i "/$1/d" "$HOME/.ssh/known_hosts"
}

function online-check() {
  # Stolen and adapted (removed cron job, use as a command) from:
  # https://github.com/nicksp/dotfiles/
  local offline
  offline=$(dig 8.8.8.8 +time=1 +short google.com A | grep -c "no servers could be reached")
  if [[ "$offline" == "0" ]]; then
    return 0
  else
    return 1
  fi
}

# extract line(s) from stdin
function line() {
  local _hc
  local _tc
  _hc="${2-${1?missing line number}}"
  [[ ! -z "$2" ]] && _tc=$(($2 - $1 + 1)) || _tc=1
  head -n"${_hc}" <&0 | tail -n"${_tc}"
}

# who is using the laptop's iSight camera?
camerausedby() {
	echo "Checking to see who is using the iSight cameraâ€¦ ðŸ“·"
	usedby=$(lsof | grep -w "AppleCamera\|USBVDC\|iSight" | awk '{printf $2"\n"}' | xargs ps)
	echo -e "Recent camera uses:\n$usedby"
}

# Extract archives - use: extract <file>
# Based on http://dotfiles.org/~pseup/.bashrc
function extract() {
	if [ -f "$1" ] ; then
		local filename
    filename=$(basename "$1")
		local foldername="${filename%%.*}"
		local fullpath=`perl -e 'use Cwd "abs_path";print abs_path(shift)' "$1"`
		local didfolderexist=false
		if [ -d "$foldername" ]; then
			didfolderexist=true
			read -p "$foldername already exists, do you want to overwrite it? (y/n) " -n 1
			echo
			if [[ $REPLY =~ ^[Nn]$ ]]; then
				return
			fi
		fi
		mkdir -p "$foldername" && cd "$foldername" || exit
		case $1 in
			*.tar.bz2) tar xjf "$fullpath" ;;
			*.tar.gz) tar xzf "$fullpath" ;;
			*.tar.xz) tar Jxvf "$fullpath" ;;
			*.tar.Z) tar xzf "$fullpath" ;;
			*.tar) tar xf "$fullpath" ;;
			*.taz) tar xzf "$fullpath" ;;
			*.tb2) tar xjf "$fullpath" ;;
			*.tbz) tar xjf "$fullpath" ;;
			*.tbz2) tar xjf "$fullpath" ;;
			*.tgz) tar xzf "$fullpath" ;;
			*.txz) tar Jxvf "$fullpath" ;;
			*.zip) unzip "$fullpath" ;;
			*) echo "'$1' cannot be extracted via extract()" && cd .. && ! $didfolderexist && rm -r "$foldername" ;;
		esac
	else
		echo "'$1' is not a valid file"
	fi
}

function localip() {
  function _localip(){ echo " $(ipconfig getifaddr "$1")"; }
  export _localip
	local purple="\x1B\[35m" reset="\x1B\[m"
	networksetup -listallhardwareports | \
		sed -r "s/Hardware Port: (.*)/${purple}\1${reset}/g" | \
		sed -r "s/Device: (en.*)$/`_localip @&`/e" | \
		sed -r "s/Ethernet Address:/ /g" | \
		sed -r "s/(VLAN Configurations)|==*//g"
}

function publicip() {
  local externalip
  local blue="\x1B\e[34m" green="\x1B\e[32m"  reset="\x1B\e[0m"
  # externalip=$(curl -s http://bot.whatismyipaddress.com)
  externalip=$(dig +short myip.opendns.com @resolver1.opendns.com)
  echo
  echo "${blue}External IP${reset}"
  echo "  ${externalip}"
  echo
  echo "${green}Internal IP(s)${reset}"
  local internalips
  internalips=($(ifconfig | grep "inet " | grep -v 127.0.0.1 | cut -d\  -f2))
  for ip in "${internalips[@]}"; do
    echo "  ${ip}"
  done
  echo
}

function current-ips() {
  publicip
  localip
}

# whois a domain or a URL
function whois() {
	local domain
  domain="$(echo "$1" | awk -F/ '{print $3}')" # get domain from URL
	if [ -z "$domain" ] ; then
		domain=$1
	fi
	echo "Getting whois record for: $domain â€¦"
	/usr/bin/whois "$domain" | sed '/NOTICE:/q'
}

# Copy w/ progress
cp-p () {
  rsync -WavP --human-readable --progress "$1" "$2"
}

function randomchars () {
  dd if=/dev/urandom count=1 2> /dev/null \
    | uuencode -m - \
    | sed -ne 2p \
    | cut -c-"${1}"
}


# Generate a 6mb random file:
#   randombytes 6 > random.txt
function randombytes () {
  dd if=/dev/urandom bs="${2:-1M}" count="${1}" 2> /dev/null | cat
}

# Encrypt to stdout
function encrypt() {
  openssl enc -aes-256-cbc -salt -a -in "$1"
}

# Decrypt to stdout
function decrypt() {
  openssl enc -aes-256-cbc -d -a -in "${1}"
}
