[user]
	name = lirsacc
	email = c.lirsac@gmail.com
[github]
  user = lirsacc
[alias]
  create = !"git init && git commit --allow-empty -m init"
  # View abbreviated SHA, description, and history graph of the latest 20 commits
  l = "log --graph --pretty=format:'%C(yellow)%h%Creset %C(red)%d %C(cyan)<%an>%Creset %s %Creset%Cgreen(%cr)%Creset' --abbrev-commit --date=relative"
  # View the current working tree status using the short format
  s = status -sb
  # Show the diff between the latest commit and the current state
  d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"
  # `git di $number` shows the diff between the state `$number` revisions ago and the current state
  di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

  dsf = !"f() { [ -z "$GIT_PREFIX" ] || cd "$GIT_PREFIX" && git diff --color "$@" | diff-so-fancy  | less --tabs=4 -RFX; }; f"
  # Pull in remote changes for the current repository and all its submodules
  p = !"git pull; git submodule foreach git pull origin master"
  # Clone a repository including all submodules
  c = clone --recursive
  # Commit all changes
  ca = !git add -A && git commit -av
  # Switch to a branch, creating it if necessary
  go = checkout -B
  # Show verbose output about tags, branches or remotes
  tags = tag -l
  branches = branch -a
  remotes = remote -v

  stats = "shortlog -sn"
	recent = !"git for-each-ref --count=10 --sort=-committerdate refs/heads/ --format='%(refname:short)'"

  # Commands for quickly saving current work state
  fix = commit --amend --no-edit
  wip = !"git add . --all -U && git commit -m wip"
  save = stash save -u

  new = !"mkdir $1; cd $1 || exit 1; git init; touch README.md .gitignore; git add . git commit -m 'Initial Commit'"
  credit = !"git commit --amend --author $1 <$2> -C HEAD"

  # Credit an author on the latest commit
  credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

  # Interactive rebase with the given number of latest commits
  reb = "!r() { git rebase -i HEAD~$1; }; r"

  # Rebase from master
  rb = rebase

  fp = fetch --prune
  prune = fetch --prune
  pp = pull --prune

[apply]
  # Detect whitespace errors when applying a patch
  whitespace = fix

[core]
  # Use custom `.gitignore` and `.gitattributes`
  excludesfile = ~/.gitignore
  # attributesfile = ~/.gitattributes
  # Treat spaces before tabs, lines that are indented with 8 or more spaces, and
  # all kinds of trailing whitespace as an error.
  # [default] trailing-space: looks for spaces at the end of a line
  # [default] space-before-tab: looks for spaces before tabs at the beginning of
  # a line
  # whitespace = space-before-tab,indent-with-non-tab,trailing-space
  #
  # Make `git rebase` safer on OS X
  # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
  trustctime = false

[color]
  # Use colors in Git commands that are capable of colored output when
  # outputting to the terminal. (This is the default setting in Git â‰¥ 1.8.4.)
  ui = auto
[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green
[color "diff"]
  meta = yellow bold
  frag = magenta bold
  old = red bold
  new = green bold
[color "status"]
  added = yellow
  changed = green
  untracked = cyan

[merge]
  # Include summaries of merged commits in newly created merge commit messages
  log = true
  conflictstyle = diff3

# URL shorthands
[url "git@github.com:"]
    insteadOf = "gh:"
    pushInsteadOf = "github:"
    pushInsteadOf = "git://github.com/"
[url "git://github.com/"]
    insteadOf = "github:"
[url "git@gist.github.com:"]
    insteadOf = "gst:"
    pushInsteadOf = "gist:"
    pushInsteadOf = "git://gist.github.com/"
[url "git://gist.github.com/"]
    insteadOf = "gist:"

[push]
  # default = matching
  default = current

[commit]
  template=~/.gitcommit


[advice]
    statusHints = false

[credential]
  # cache creds (git help credential-cache)
  helper = cache


[diff]
  # Detect copies as well as renames
  renames = copies
  indentHeuristic = on

[diff "bin"]
  # Use `hexdump` to diff binary files
  textconv = hexdump -v -C

[help]
  # Automatically correct and execute mistyped commands
  # autocorrect = 1
  autocorrect = 0

[rebase]
  autosquash = true
[filter "lfs"]
  clean = git-lfs clean %f
  smudge = git-lfs smudge %f
  required = true
