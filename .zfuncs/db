#!/usr/bin/env zsh

function db () {
  #
  # Start `mysql` or `mycli` from a known config file.
  # Store config files in `$HOME/.dbs` or `$DATABASE_STORE`,
  # they should be source-able exposing the following variables:
  #
  #   `host`
  #   `port`
  #   `username`
  #   `password`
  #   `database`
  #   `driver`
  #
  # `password` and `username` can be empty or missing.
  #
  # To protect the files, use chown / chmod to your own user.
  #
  # Flags:
  # `-d`: will switch from `mycli` to `mysql` (only for mysql)
  # `-p`: just prints the connection string (only for mysql, useful for mysqldump and such)
  # `-l`: list all existing databases

  local loc="${DATABASE_STORE:-$HOME/.dbs}"
  local available_databases=($(ls $loc))
  local driver host port databse username password

  function _list() {
    for db_ in "${available_databases[@]}"; do
      unset driver host port databse username password
      . $loc/$db_
      printf " %-7s %s\n" "[${driver:-mysql}]" "$db_"
    done
  }

  if [[ -z "$1" || "$1" == "-l" ]]; then
    echo
    echo "Available databases stored in "$(realpath $loc)":"
    echo
    _list
    echo
    return 0
  fi

  db_file="$1"
  shift

  if [ ! -f "$loc/$db_file" ]; then
    echo
    echo "Database $1 can't be found in "$(realpath $loc)"."
    echo "Please choose from:"
    echo
    _list
    echo
    return 1
  fi

  unset driver host port databse username password
  # shellcheck disable=SC1090
  . $loc/$db_file

  if [ "${driver:-mysql}" = "mysql" ]; then
    if [[ "$1" == "-p" ]]; then
      echo "-h ${host:?} -P ${port:?} -u ${username:-''} --password=${password:-''} $* ${database:?}"
      return 0
    else
      [[ $1 == "-d" ]] && cmd="mysql" || cmd="mycli"
      $cmd  -h "${host:?}" -P "${port:?}" -u "${username:-''}" --password="${password:-''}" "${database:?}"
    fi
  elif [ "${driver:-mysql}" = "pg" ]; then
    # See https://www.postgresql.org/docs/current/static/libpq-envars.html
    # Normally the env variables should not be visible from the outside.
    # [TODO] Could that work with nmysql / mycli rather than build
    # a connection string.
    PGPASSWORD="${password:-}" PGUSER="${username:-}" PGPORT="${port:?}" PGDATABASE="${database:-}" PGHOST="${host:?}" psql
  else
    echo "Unknown driver ${driver} for ${db_file}. Supports (mysql or pg)."
  fi
}
